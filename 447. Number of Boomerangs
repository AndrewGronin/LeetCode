//https://leetcode.com/problems/number-of-boomerangs
class Solution {
public:
    int getDist(vector<int>& a,  vector<int>& b) {
        int x = a[0] - b[0];
        int y = a[1] - b[1];
        return x * x + y * y;
    }

    int numberOfBoomerangs(vector<vector<int>>& points) {
        int n = points.size();
        int dist[n][n];
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                dist[i][j] = getDist(points[i], points[j]);
                dist[j][i] = dist[i][j];
            }
        }
        int count = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(i != j) {
                    for(int k = j + 1; k < n; k++) {
                        if(i != k) {
                            if(dist[i][j] == dist[i][k]) {
                               // cout << i << j << k << endl;
                                count += 2;
                            }
                        }
                    }
                }
            }
        }
        return count;
    }
};
