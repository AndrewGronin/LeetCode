//https://leetcode.com/problems/remove-outermost-parentheses/
class Solution {
public:
    string removeOuterParentheses(string s) {
        vector<int> remove;
        int c = 0;
         remove.push_back(0);
        for(int i = 0; i< s.size();++i){
            
            if(s[i] == '(')
                c++;
            else
                c--;
            remove.push_back(c);
        
            
        }
        
        for(int i:remove)cout<<i<<" ";
        
        string res="";
        for(int i = 0; i< s.size();++i){
            if(!((s[i] == '(' &&  remove[i]==0)||(s[i] == ')' &&  remove[i]==1)))
                res+=s[i];
                    
        }
        return res;
    }
};

string stringToString(string input) {
    assert(input.length() >= 2);
    string result;
    for (int i = 1; i < input.length() -1; i++) {
        char currentChar = input[i];
        if (input[i] == '\\') {
            char nextChar = input[i+1];
            switch (nextChar) {
                case '\"': result.push_back('\"'); break;
                case '/' : result.push_back('/'); break;
                case '\\': result.push_back('\\'); break;
                case 'b' : result.push_back('\b'); break;
                case 'f' : result.push_back('\f'); break;
                case 'r' : result.push_back('\r'); break;
                case 'n' : result.push_back('\n'); break;
                case 't' : result.push_back('\t'); break;
                default: break;
            }
            i++;
        } else {
          result.push_back(currentChar);
        }
    }
    return result;
}

int main() {
    string line;
    while (getline(cin, line)) {
        string S = stringToString(line);
        
        string ret = Solution().removeOuterParentheses(S);

        string out = (ret);
        cout << out << endl;
    }
    return 0;
}
