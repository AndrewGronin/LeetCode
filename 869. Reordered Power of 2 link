//https://leetcode.com/problems/reordered-power-of-2/
class Solution {/
public:
    vector<int> IntToVEC(int n){
        vector<int> res;
        while(n>0){
            res.push_back(n%10);
            n/=10;
        }
        return res;
    }
    int VECtoINT(vector<int> digs){
        int n=0;
        for(auto i:digs){
            n=n*10+i;
        }
        return n;
    }
    
    bool isPowerOftwo(int n) {   
        while(n >= 1){
            if (n == 1)
                return 1;
            else if(n % 2 == 0)
                n/=2;
            else
                return 0;
        }
        return 0;
  
    }
    
    bool reorderedPowerOf2(int N) {
        vector<int> num = IntToVEC(N);
        
        for(auto i:num)cout<<i;
        
        int f = 1;
        sort(num.begin(),num.end()); 
        if(num[0]!=0 && isPowerOftwo(VECtoINT(num))) return 1;
        while(next_permutation(num.begin(),num.end())){
            if(num[0]!=0)
            if(isPowerOftwo(VECtoINT(num))) return 1;
        }
        return 0;
        
    
    }
};

int stringToInteger(string input) {
    return stoi(input);
}

string boolToString(bool input) {
    return input ? "True" : "False";
}

int main() {
    string line;
    while (getline(cin, line)) {
        int N = stringToInteger(line);
        
        bool ret = Solution().reorderedPowerOf2(N);

        string out = boolToString(ret);
        cout << out << endl;
    }
    return 0;
}
